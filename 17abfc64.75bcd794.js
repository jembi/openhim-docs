(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{160:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return u})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return h})),n.d(t,"default",(function(){return d}));var a=n(3),o=n(7),i=(n(0),n(913)),s=n(917),r=n(918),c=n(919),u={id:"authentication",title:"API Authentication",sidebar_label:"Authentication",keywords:["OpenHIM","API","Authentication"],description:"Authentication for the OpenHIM API calls"},l={unversionedId:"api/introduction/authentication",id:"version-7.2.x/api/introduction/authentication",isDocsHomePage:!1,title:"API Authentication",description:"Authentication for the OpenHIM API calls",source:"@site/versioned_docs/version-7.2.x/api/introduction/authentication.md",slug:"/api/introduction/authentication",permalink:"/docs/7.2.x/api/introduction/authentication",version:"7.2.x",sidebar_label:"Authentication",sidebar:"version-7.2.x/api",previous:{title:"welcome",permalink:"/docs/7.2.x/api/introduction/welcome"},next:{title:"Audits overview",permalink:"/docs/7.2.x/api/audits/overview"}},h=[{value:"Local authentication",id:"local-authentication",children:[{value:"Authentication endpoint",id:"authentication-endpoint",children:[]}]},{value:"Basic authentication",id:"basic-authentication",children:[]},{value:"OpenID authentication",id:"openid-authentication",children:[{value:"OpenID configuration",id:"openid-configuration",children:[]},{value:"Authentication endpoint",id:"authentication-endpoint-1",children:[]}]},{value:"Token authentication DEPRECATED",id:"token-authentication-deprecated",children:[{value:"Construct authentication headers",id:"construct-authentication-headers",children:[]},{value:"Initial authentication notification",id:"initial-authentication-notification",children:[]},{value:"For subsequent requests to the API",id:"for-subsequent-requests-to-the-api",children:[]}]},{value:"Examples",id:"examples",children:[{value:"Token authentication",id:"token-authentication",children:[]}]}],p={toc:h};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"We have four types of user authentication in Openhim: Local, Basic, Openid and Token ",Object(i.b)("em",{parentName:"p"},"(deprecated)"),", described below."),Object(i.b)("p",null,'All of these types will create a session for each authenticated user and will send a response header "Set-Cookie" to authenticate the other incoming requests.'),Object(i.b)("p",null,'The session will be saved in the "Session" Mongo collection.'),Object(i.b)("p",null,'The password related fields will be saved in the "Passport" Mongo collection.'),Object(i.b)("p",null,"Some configurations can be updated according to the use case:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"api": {\n    // The session secret key used for the hashing of signed cookie (used to detect if the client modified the cookie)\n    // Signed cookie is another cookie of the same name with the .sig suffix appended\n    "sessionKey": "r8q,+&1LM3)CD*zAGpx1xm{NeQhc;#",\n    // The session max age is the session cookie expiration time (in milliseconds)\n    "maxAge": 7200000,\n    // The number of characters that will be used to generate a random salt for the encryption of passwords\n    "salt": 10,\n    // The types of authentication to use for the API\n    // Supported types are "token" and "basic" and "local"\n    // * "local" means through the UI with hitting "/authentication/local" endpoint with username and password, \n    // this will create a session for the user and set cookies in the browser.\n    // * "basic" means with basic auth either through browser or postman by giving also username and password.\n    // * "openid" means with a third party authentication provider (e.g. keycloak).\n    // * [Deprecated] "token" means that a request should provide in the header an \'auth-token\', \'auth-salt\' and \'auth-ts\' to be authenticated.\n    "authenicationTypes": ["token"],\n    // Openid connect provider configuration needed for the authentication\n    "openid": {\n      // OpenID configuration\n    }\n  }\n')),Object(i.b)("h2",{id:"local-authentication"},"Local authentication"),Object(i.b)("p",null,"This type of authentication uses the local authentication protocol (Local passport module). It is the most widely used way for websites to authenticate users via username\nand/or email as well as a password."),Object(i.b)("p",null,"For more information on local authentication in Passport.js, check out: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://passportjs.org/guide/username-password/"}),"http://passportjs.org/guide/username-password/")),Object(i.b)("h3",{id:"authentication-endpoint"},"Authentication endpoint"),Object(i.b)("p",null,"To be authenticated using the local protocol, you can hit this route: "),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"POST https://<server>:8080/authenticate/local")),Object(i.b)("p",null,"With a body that contains the following user details: "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "username": "<email>",\n    "password": "<password>"\n}\n')),Object(i.b)("h2",{id:"basic-authentication"},"Basic authentication"),Object(i.b)("p",null,"This is very similar to the Local authentication, except that it uses the Basic passport module and every request to any endpoint should be authenticated."),Object(i.b)("p",null,"For more information on basic authentication in Passport.js, check out: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.passportjs.org/packages/passport-http/"}),"https://www.passportjs.org/packages/passport-http/")),Object(i.b)("p",null,"If this type of authentication is enabled then you can add this header to your request: "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"headers": { \n    // ...,\n  "Authorization": "Basic Buffer.from(`${<email>}:${<password>}`).toString(\'base64\');"\n}\n')),Object(i.b)("h2",{id:"openid-authentication"},"OpenID authentication"),Object(i.b)("p",null,"This authentication uses OpenID Connect Authentication Protocol, this will require enabling this auth type in the Openhim Core and also providing the necessary configurations."),Object(i.b)("p",null,"For more information on OpenID connect Protocol in Passport.js, check out: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.passportjs.org/packages/passport-openidconnect/"}),"http://www.passportjs.org/packages/passport-openidconnect/")),Object(i.b)("p",null,"The image below illustrates the openid authentication flow with Keycloak as an example of identity access manager. "),Object(i.b)("img",{alt:"Openid Authentication Flow",src:Object(c.a)("img/auth_openid_flow.png")}),Object(i.b)("h3",{id:"openid-configuration"},"OpenID configuration"),Object(i.b)("p",null,"This configuration should be adapted according to your use case."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'"api": {\n    // The types of authentication to use for the API\n    // Supported types are "token" and "basic" and "local"\n    // * "local" means through the UI with hitting "/authentication/local" endpoint with username and password, \n    // this will create a session for the user and set cookies in the browser.\n    // * "basic" means with basic auth either through browser or postman by giving also username and password.\n    // * "openid" means with a third party authentication provider (e.g. keycloak).\n    // * [Deprecated] "token" means that a request should provide in the header an \'auth-token\', \'auth-salt\' and \'auth-ts\' to be authenticated.\n    "authenicationTypes": ["openid"],\n    // Openid connect provider configuration needed for the authentication\n    "openid": {\n      // Openid connect provider realm url link\n      "url": "http://localhost:9088/realms/platform-realm",\n      // Callback URL used by openid connect provider (should be the same callback URL specified in realm)\n      "callbackUrl": "http://localhost:9000",\n      // CLient ID specified in the realm\n      "clientId": "openhim-oauth",\n      // Client secret specified in the realm\n      "clientSecret": "tZKfEbWf0Ka5HBNZwFrdSyQH2xT1sNMR",\n      // Scopes to be requested from Openid connect provider\n      "scope": "openid email profile offline_access roles"\n    }\n  }\n')),Object(i.b)("h3",{id:"authentication-endpoint-1"},"Authentication endpoint"),Object(i.b)("p",null,"To be authenticated using OpenID, you can hit this route: "),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"POST https://<server>:8080/authenticate/openid")),Object(i.b)("p",null,"With a body that contains:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{ \n  "code": "<code>", \n  "sessionState": "<session_state>", \n  "state":" <state>"\n}\n')),Object(i.b)("h2",{id:"token-authentication-deprecated"},"Token authentication ","[DEPRECATED]"),Object(i.b)("h3",{id:"construct-authentication-headers"},"Construct authentication headers"),Object(i.b)("p",null,"Each and every API call that is made to the OpenHIM has to be authenticated. The authentication mechanism that is used can be fairly complex to work with however it provides decent security."),Object(i.b)("p",null,"The authentication mechanism is based on ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://stackoverflow.com/a/9387289/588776"}),"http://stackoverflow.com/a/9387289/588776"),"."),Object(i.b)("h3",{id:"initial-authentication-notification"},"Initial authentication notification"),Object(i.b)("p",null,"The user notifies the API that it wants to use its authenticated service:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"GET https://<server>:8080/authenticate/<user_email>")),Object(i.b)("p",null,"If you don't have a user account yet, you can use the root user. The default root user details are as follows:"),Object(i.b)("p",null,"username: root\npassword: openhim-password (you should change this on a production installation!)"),Object(i.b)("p",null,"The server will respond with the salt that was used to calculate the clients passwordHash (during user registration):"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "salt": "xxx",\n  "ts": "xxx"\n}\n')),Object(i.b)("p",null,"You must calculate a passwordhash using the received salt and the supplied user password. ",Object(i.b)("inlineCode",{parentName:"p"},"passwordhash = (sha512(salt + password))")),Object(i.b)("h3",{id:"for-subsequent-requests-to-the-api"},"For subsequent requests to the API"),Object(i.b)("p",null,"For every request you must add the following additional HTTP headers to the request:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-http"}),"auth-username: <username>\nauth-ts: <the current timestamp - in the following format '2014-10-20T13:19:32.380Z' - user time must be in sync with server time for request to work>\nauth-salt: <random uuid salt that you generate>\nauth-token: <= sha512(passwordhash + auth-salt + auth-ts) >\n")),Object(i.b)("p",null,"The server will authorise this request by calculating sha512(passwordhash + auth-salt + auth-ts) using the passwordhash from its own database and ensuring that:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"this is equal to auth-token"),Object(i.b)("li",{parentName:"ul"},"the auth-ts isn't more than 2 seconds old")),Object(i.b)("p",null,"If these 2 conditions true the request is allowed."),Object(i.b)("h2",{id:"examples"},"Examples"),Object(i.b)("h3",{id:"token-authentication"},"Token authentication"),Object(i.b)("p",null,"Below are a few examples of how to achieve the correct request headers to authenticate to the OpenHIM API"),Object(i.b)(s.a,{defaultValue:"nodejs",values:[{label:"NodeJS",value:"nodejs"},{label:"Bash",value:"bash"}],mdxType:"Tabs"},Object(i.b)(r.a,{value:"nodejs",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// openhim-api.js\n\nconst crypto = require('crypto')\nconst request = require('request')\n\n// authenticate the username is valid\nconst authenticate = async (options) => {\n  return new Promise((resolve, reject) => {\n    // authenticate the username\n    let reqOptions = {\n      url: `${options.apiURL}/authenticate/${options.username}`,\n      rejectUnauthorized: options.rejectUnauthorized\n    }\n\n    request.get(reqOptions, (err, resp, body) => {\n      if (err){\n        return reject(err)\n      }\n      // if user isn't found\n      if (resp.statusCode !== 200) {\n        return reject(new Error(`User ${options.username} not found when authenticating with core API`))\n      }\n      try {\n        body = JSON.parse(body)\n        resolve(body)\n      } catch (err) {\n        reject(err)\n      }\n    })\n  })\n}\n\n// Generate the relevant auth headers\nconst genAuthHeaders = async (options) => {\n  const authDetails = await authenticate(options)\n\n  const salt = authDetails.salt\n  const now = new Date()\n\n  // create passhash\n  let shasum = crypto.createHash('sha512')\n  shasum.update(salt + options.password)\n  const passhash = shasum.digest('hex')\n\n  // create token\n  shasum = crypto.createHash('sha512')\n  shasum.update(passhash + salt + now)\n  const token = shasum.digest('hex')\n\n  // define request headers with auth credentials\n  return {\n    'auth-username': options.username,\n    'auth-ts': now,\n    'auth-salt': salt,\n    'auth-token': token\n  }\n}\n"))),Object(i.b)(r.a,{value:"bash",mdxType:"TabItem"},Object(i.b)("p",null,"When creating your bash file, ensure the bash script is executable"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'# openhim-api.sh\n\n#!/bin/bash\n\nif (( $# < 2)); then\n    echo "OpenHIM API: Curl wrapper that sets up the appropriate OpenHIM authentication headers";\n    echo "Usage: $0 USERNAME PASSWORD [CURL_ARGS...]";\n    exit 0;\nfi\n\nusername=$1;\npass=$2;\nshift;\nshift;\n\n# which server?\nserver=""\nfor arg in $@; do\n    match=`echo $arg | grep http | perl -pe \'s|(https?://.*?)/.*|\\1|\'`;\n    if [ "$match" ]; then\n        server=$match;\n    fi\ndone\n\nif [ ! "$server" ]; then\n    echo "OpenHIM server not specified";\n    exit 0;\nfi\n\nauth=`curl -k -s $server/authenticate/$username`;\nsalt=`echo $auth | perl -pe \'s|.*"salt":"(.*?)".*|\\1|\'`;\nts=`echo $auth | perl -pe \'s|.*"ts":"(.*?)".*|\\1|\'`;\n\npasshash=`echo -n "$salt$pass" | shasum -a 512 | awk \'{print $1}\'`;\ntoken=`echo -n "$passhash$salt$ts" | shasum -a 512 | awk \'{print $1}\'`;\n\ncurl -k -H "auth-username: $username" -H "auth-ts: $ts" -H "auth-salt: $salt" -H "auth-token: $token" $@;\necho "";\n')))))}d.isMDXComponent=!0},913:function(e,t,n){"use strict";n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return b}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=o.a.createContext({}),l=function(e){var t=o.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=l(e.components);return o.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),h=l(n),d=a,b=h["".concat(s,".").concat(d)]||h[d]||p[d]||i;return n?o.a.createElement(b,r(r({ref:t},u),{},{components:n})):o.a.createElement(b,r({ref:t},u))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:a,s[1]=r;for(var u=2;u<i;u++)s[u]=n[u];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},914:function(e,t,n){"use strict";function a(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(o&&(o+=" "),o+=t);return o}},915:function(e,t,n){"use strict";var a=n(0),o=n(916);t.a=function(){const e=Object(a.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},916:function(e,t,n){"use strict";var a=n(0);const o=Object(a.createContext)(void 0);t.a=o},917:function(e,t,n){"use strict";var a=n(0),o=n.n(a),i=n(915),s=n(914),r=n(56),c=n.n(r);const u=37,l=39;t.a=function(e){const{lazy:t,block:n,defaultValue:r,values:h,groupId:p,className:d}=e,{tabGroupChoices:b,setTabGroupChoices:m}=Object(i.a)(),[f,O]=Object(a.useState)(r),j=a.Children.toArray(e.children);if(null!=p){const e=b[p];null!=e&&e!==f&&h.some((t=>t.value===e))&&O(e)}const w=e=>{O(e),null!=p&&m(p,e)},g=[];return o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(s.a)("tabs",{"tabs--block":n},d)},h.map((({value:e,label:t})=>o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":f===e,className:Object(s.a)("tabs__item",c.a.tabItem,{"tabs__item--active":f===e}),key:e,ref:e=>g.push(e),onKeyDown:e=>{((e,t,n)=>{switch(n.keyCode){case l:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case u:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(g,e.target,e)},onFocus:()=>w(e),onClick:()=>{w(e)}},t)))),t?Object(a.cloneElement)(j.filter((e=>e.props.value===f))[0],{className:"margin-vert--md"}):o.a.createElement("div",{className:"margin-vert--md"},j.map(((e,t)=>Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==f})))))}},918:function(e,t,n){"use strict";var a=n(3),o=n(0),i=n.n(o);t.a=function({children:e,hidden:t,className:n}){return i.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:t,className:n}),e)}},919:function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return s}));var a=n(23),o=n(920);function i(){const{siteConfig:{baseUrl:e="/",url:t}={}}=Object(a.default)();return{withBaseUrl:(n,a)=>function(e,t,n,{forcePrependBaseUrl:a=!1,absolute:i=!1}={}){if(!n)return n;if(n.startsWith("#"))return n;if(Object(o.b)(n))return n;if(a)return t+n;const s=n.startsWith(t)?n:t+n.replace(/^\//,"");return i?e+s:s}(t,e,n,a)}}function s(e,t={}){const{withBaseUrl:n}=i();return n(e,t)}},920:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function o(e){return void 0!==e&&!a(e)}n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return o}))}}]);